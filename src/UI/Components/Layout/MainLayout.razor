@using Infrastructure
@using Infrastructure.Extensions
@inherits LayoutComponentBase
@inject IJSRuntime _js
@inject IDialogService _dialogServices
@inject NavigationManager _navigationManager
<link rel="stylesheet" href="UI.styles.css" />
<AuthorizeView>
    <Authorized>
        <div class="p-4 m-0 border-0 bd-example" style="background-color:#f5f5f5;">
            <div class="mb-5">
                <NavMenu></NavMenu>
            </div>
            <div class="content mb-5" style="background-color:#f5f5f5;">
                @Body
                <FluentDialogProvider />
                <FluentTooltipProvider />
            </div>
            <div class="footer mt-auto py-3 bg-light fixed-bottom">
                <div class="container">
                    <div class="row">
                        <div class="col-3 d-flex flex-column align-items-center" @onclick='(() => Navigate("/"))'>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="gray" class="bi bi-house-door-fill" viewBox="0 0 16 16">
                                <path d="M6.5 14.5v-3.505c0-.245.25-.495.5-.495h2c.25 0 .5.25.5.5v3.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5" />
                            </svg>
                            <label class="form-label text-primary">Home</label>
                        </div>
                        <div class="col-3 d-flex flex-column align-items-center" @onclick='(() => Navigate("breakdowns"))'>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="gray" class="bi bi-file-earmark-text-fill" viewBox="0 0 16 16">
                                <path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0M9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1M4.5 9a.5.5 0 0 1 0-1h7a.5.5 0 0 1 0 1zM4 10.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5m.5 2.5a.5.5 0 0 1 0-1h4a.5.5 0 0 1 0 1z" />
                            </svg>
                            <label class="form-label text-muted">Serviços</label>
                        </div>
                        <div class="col-3 d-flex flex-column align-items-center" @onclick='(() => Navigate("breakdown/create"))'>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="gray" class="bi bi-plus-square-fill" viewBox="0 0 16 16">
                                <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0" />
                            </svg>
                            <label class="form-label text-muted">Cadastrar</label>
                        </div>
                        <div class="col-3 d-flex flex-column align-items-center" @onclick='(() => Navigate("/"))'>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="gray" class="bi bi-person-circle" viewBox="0 0 16 16">
                                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                                <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
                            </svg>
                            <label class="form-label text-muted">Perfil</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>

    <NotAuthorized>
        <FluentDialogProvider />
        <FluentTooltipProvider />
        <Login />
    </NotAuthorized>
</AuthorizeView>

@code {

    private string _token = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _token = await _js.GetFromLocalStorage(TokenAuthenticationProvider.TokenKey);

        bool tokenIsValid = JwtUtils.CheckTokenIsValid(_token);

        if (!tokenIsValid && !_navigationManager.Uri.Contains("login"))
        {
            var dialogResult = await _dialogServices.ShowInfoAsync("Desculpe, sua sessão expirou. Por favor, faça login para continuar.", "Atenção");

            var result = await dialogResult.Result;

            if (!result.Cancelled)
            {
                await _js.RemoveItem(TokenAuthenticationProvider.TokenKey);
                _navigationManager.NavigateTo("/login", true);
            }
        }
    }

    private void Navigate(string uri) => _navigationManager.NavigateTo(uri);
}